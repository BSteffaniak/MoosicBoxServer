{"version":3,"file":"AudioZonesModal.Tlf1twj5.js","sources":["../../../src/components/AudioZones/AudioZones.tsx","../../../src/components/AudioZonesModal/AudioZonesModal.tsx"],"sourcesContent":["import './audio-zones.css';\nimport { produce } from 'solid-js/store';\nimport { Index, createComputed, createSignal } from 'solid-js';\nimport { api, Api } from '~/services/api';\nimport {\n    currentPlaybackTarget,\n    playerState,\n    setCurrentPlaybackTarget,\n    setPlayerState,\n} from '~/services/player';\nimport { appState } from '~/services/app';\nimport Modal from '../Modal';\nimport { clientSignal } from '~/services/util';\nimport { connectionId } from '~/services/ws';\n\ntype PlayerWithConnection = Api.Player & {\n    connection: Api.Connection | undefined;\n};\ntype AudioZoneWithConnections = Omit<Api.AudioZone, 'players'> & {\n    players: PlayerWithConnection[];\n};\n\nexport default function audioZonesFunc() {\n    let audioZoneNameRef: HTMLInputElement | undefined;\n\n    const [connectionPlayers, setConnectionPlayers] = createSignal<\n        PlayerWithConnection[]\n    >([]);\n    const [audioZones, setAudioZones] = createSignal<\n        AudioZoneWithConnections[]\n    >([]);\n    const [activeAudioZone, setActiveAudioZone] = createSignal(\n        playerState.currentAudioZone,\n    );\n    const [editingAudioZoneName, setEditingAudioZoneName] =\n        createSignal<Api.UpdateAudioZone>();\n    const [activePlayersZone, setActivePlayersZone] =\n        createSignal<AudioZoneWithConnections>();\n\n    const [$connectionId] = clientSignal(connectionId);\n    const [connections, setConnections] = createSignal<Api.Connection[]>([]);\n\n    function getPlayersWithConnections(): PlayerWithConnection[] {\n        const current = appState.connection;\n        console.log(current);\n\n        return (\n            current?.players?.map((player) => {\n                return {\n                    ...player,\n                    connection: current,\n                };\n            }) ?? []\n        );\n    }\n\n    function getAudioZonesWithConnections(): AudioZoneWithConnections[] {\n        const connections = appState.connections;\n\n        return playerState.audioZones.map((zone) => {\n            const zoneWithConnections: AudioZoneWithConnections = {\n                ...zone,\n                players: zone.players.map((player) => {\n                    return {\n                        ...player,\n                        connection: connections.find((c) => {\n                            return c.players?.find(\n                                (p) => p.playerId === player.playerId,\n                            );\n                        }),\n                    };\n                }),\n            };\n            return zoneWithConnections;\n        });\n    }\n\n    createComputed(() => {\n        setConnectionPlayers(getPlayersWithConnections());\n        setAudioZones(getAudioZonesWithConnections());\n        setActiveAudioZone(playerState.currentAudioZone);\n\n        const alive = appState.connections.filter((c) => c.alive);\n        const dead = appState.connections.filter((c) => !c.alive);\n\n        const aliveCurrent = alive.filter(\n            (a) => a.connectionId == $connectionId(),\n        );\n        const aliveOthers = alive.filter(\n            (a) => a.connectionId != $connectionId(),\n        );\n\n        setConnections([...aliveCurrent, ...aliveOthers, ...dead]);\n    });\n\n    function activateConnectionPlayer(player: PlayerWithConnection) {\n        setPlayerState(\n            produce((state) => {\n                state.currentAudioZone = undefined;\n                const connectionId = player.connection?.connectionId;\n                if (connectionId) {\n                    setCurrentPlaybackTarget({\n                        type: 'CONNECTION_OUTPUT',\n                        connectionId,\n                        outputId: player.audioOutputId,\n                    });\n                }\n            }),\n        );\n    }\n\n    function activateAudioZone(zone: Api.AudioZone) {\n        setPlayerState(\n            produce((state) => {\n                state.currentAudioZone = zone;\n                setCurrentPlaybackTarget({\n                    type: 'AUDIO_ZONE',\n                    audioZoneId: zone.id,\n                });\n            }),\n        );\n    }\n\n    async function updateAudioZone(\n        update: Api.UpdateAudioZone,\n    ): Promise<Api.AudioZone> {\n        setPlayerState(\n            produce((state) => {\n                if (state.currentAudioZone?.id === update.id) {\n                    Object.assign(state.currentAudioZone, update);\n                }\n\n                const zone = state.audioZones.find((z) => z.id === update.id);\n\n                if (zone) {\n                    Object.assign(zone, { name: update.name ?? zone.name });\n                }\n            }),\n        );\n\n        return await api.updateAudioZone(update);\n    }\n\n    async function deleteAudioZone(zone: Api.AudioZone) {\n        let index: number | undefined;\n\n        setPlayerState(\n            produce((state) => {\n                if (zone.id === state.currentAudioZone?.id) {\n                    const newZone = state.audioZones[0];\n                    state.currentAudioZone = newZone;\n                    if (newZone) {\n                        setCurrentPlaybackTarget({\n                            type: 'AUDIO_ZONE',\n                            audioZoneId: newZone.id,\n                        });\n                    } else {\n                        setCurrentPlaybackTarget(undefined);\n                    }\n                }\n\n                index = state.audioZones.findIndex((x) => x.id === zone.id);\n                state.audioZones.splice(index, 1);\n            }),\n        );\n\n        await api.deleteAudioZone(zone.id);\n    }\n\n    function replaceZone(\n        existing: AudioZoneWithConnections,\n        zone: Partial<Api.AudioZone>,\n    ) {\n        setPlayerState(\n            produce((state) => {\n                if (state.currentAudioZone?.id === existing.id) {\n                    Object.assign(state.currentAudioZone, zone);\n                }\n\n                const stateZone = state.audioZones.find(\n                    (z) => z.id === existing.id,\n                );\n\n                if (stateZone) {\n                    Object.assign(stateZone, zone);\n                }\n            }),\n        );\n    }\n\n    async function disableAudioPlayer(\n        zone: AudioZoneWithConnections,\n        player: Api.Player,\n    ) {\n        const players = zone.players\n            .filter((p) => p.playerId !== player.playerId)\n            .map(({ playerId }) => playerId);\n        const update: Api.UpdateAudioZone = { id: zone.id, players };\n\n        const newZone = await updateAudioZone(update);\n        replaceZone(zone, newZone);\n\n        const zones = getAudioZonesWithConnections();\n        setActivePlayersZone(zones.find((x) => x.id === newZone.id));\n    }\n\n    async function enableAudioPlayer(\n        zone: AudioZoneWithConnections,\n        player: Api.Player,\n    ) {\n        const players = [\n            ...zone.players.filter((p) => p.playerId !== player.playerId),\n            player,\n        ].map(({ playerId }) => playerId);\n        const update: Api.UpdateAudioZone = { id: zone.id, players };\n\n        const newZone = await updateAudioZone(update);\n        replaceZone(zone, newZone);\n\n        const zones = getAudioZonesWithConnections();\n        setActivePlayersZone(zones.find((x) => x.id === newZone.id));\n    }\n\n    return (\n        <div class=\"audio-zones\">\n            <div class=\"audio-zones-list-modal-content\">\n                <Index each={connectionPlayers()}>\n                    {(connectionPlayer) => (\n                        <div\n                            class={`audio-zones-list-zone${\n                                currentPlaybackTarget()?.type ===\n                                    'CONNECTION_OUTPUT' &&\n                                connectionPlayer().audioOutputId ===\n                                    (\n                                        currentPlaybackTarget() as Api.ConnectionOutputPlaybackTarget\n                                    ).outputId\n                                    ? ' active'\n                                    : ''\n                            }`}\n                        >\n                            <h2\n                                onClick={() =>\n                                    activateConnectionPlayer(connectionPlayer())\n                                }\n                                class=\"audio-zones-list-zone-header\"\n                            >\n                                {connectionPlayer().name}\n                            </h2>\n                            <div\n                                class={`audio-zone-audio-zone-modal-audio-zone-player`}\n                            >\n                                <img\n                                    class=\"audio-icon\"\n                                    src=\"/img/audio-white.svg\"\n                                    alt=\"Zone Player\"\n                                />{' '}\n                                {connectionPlayer().connection?.name} -{' '}\n                                {connectionPlayer().name}\n                            </div>\n                        </div>\n                    )}\n                </Index>\n                <Index each={audioZones()}>\n                    {(audioZone) => (\n                        <div\n                            class={`audio-zones-list-zone${\n                                audioZone().id === activeAudioZone()?.id\n                                    ? ' active'\n                                    : ''\n                            }`}\n                        >\n                            <h2\n                                onClick={() => activateAudioZone(audioZone())}\n                                class=\"audio-zones-list-zone-header\"\n                            >\n                                {editingAudioZoneName()?.id ===\n                                audioZone().id ? (\n                                    <>\n                                        <input\n                                            ref={audioZoneNameRef!}\n                                            autofocus\n                                            onClick={(e) =>\n                                                e.stopImmediatePropagation()\n                                            }\n                                            type=\"text\"\n                                            value={\n                                                editingAudioZoneName()!.name ??\n                                                ''\n                                            }\n                                            onKeyUp={async (e) => {\n                                                if (e.key !== 'Enter') return;\n\n                                                e.stopImmediatePropagation();\n                                                editingAudioZoneName()!.name =\n                                                    audioZoneNameRef!.value;\n                                                await updateAudioZone(\n                                                    editingAudioZoneName()!,\n                                                );\n                                                setEditingAudioZoneName(\n                                                    undefined,\n                                                );\n                                            }}\n                                        />\n                                        <button\n                                            class=\"remove-button-styles audio-zones-list-zone-header-submit-edit-name\"\n                                            onClick={async (e) => {\n                                                e.stopImmediatePropagation();\n                                                editingAudioZoneName()!.name =\n                                                    audioZoneNameRef!.value;\n                                                await updateAudioZone(\n                                                    editingAudioZoneName()!,\n                                                );\n                                                setEditingAudioZoneName(\n                                                    undefined,\n                                                );\n                                            }}\n                                        >\n                                            <img\n                                                class=\"audio-zones-list-zone-header-submit-edit-name-icon\"\n                                                src=\"/img/checkmark-white.svg\"\n                                                alt=\"Submit audio zone name\"\n                                            />\n                                        </button>\n                                    </>\n                                ) : (\n                                    <>\n                                        {audioZone().name}\n                                        <button\n                                            class=\"remove-button-styles audio-zones-list-zone-header-edit-name\"\n                                            onClick={(e) => {\n                                                e.stopImmediatePropagation();\n                                                setEditingAudioZoneName({\n                                                    id: audioZone().id,\n                                                    name: audioZone().name,\n                                                });\n                                            }}\n                                        >\n                                            <img\n                                                class=\"audio-zones-list-zone-header-edit-name-icon\"\n                                                src=\"/img/pencil-white.svg\"\n                                                alt=\"Edit audio zone name\"\n                                            />\n                                        </button>\n                                    </>\n                                )}\n                                <div class=\"audio-zones-list-zone-header-right\">\n                                    <div\n                                        class=\"audio-zones-list-zone-header-delete-zone\"\n                                        onClick={async (e) => {\n                                            e.stopImmediatePropagation();\n                                            await deleteAudioZone(audioZone());\n                                        }}\n                                    >\n                                        <img\n                                            class=\"trash-icon\"\n                                            src=\"/img/trash-white.svg\"\n                                            alt=\"Delete playback session\"\n                                        />\n                                    </div>\n                                </div>\n                            </h2>\n                            <Index each={audioZone().players}>\n                                {(player) => (\n                                    <div\n                                        class={`audio-zone-audio-zone-modal-audio-zone-player`}\n                                    >\n                                        <img\n                                            class=\"audio-icon\"\n                                            src=\"/img/audio-white.svg\"\n                                            alt=\"Zone Player\"\n                                        />{' '}\n                                        {player().connection?.name} -{' '}\n                                        {player().name}\n                                    </div>\n                                )}\n                            </Index>\n                            <button\n                                class={`remove-button-styles audio-zone-audio-zone-modal-audio-zone-player add-players`}\n                                onClick={(e) => {\n                                    e.stopImmediatePropagation();\n                                    setActivePlayersZone(audioZone());\n                                }}\n                            >\n                                <img\n                                    class=\"plus-icon\"\n                                    src=\"/img/plus-white.svg\"\n                                    alt=\"Add players to audio zone\"\n                                />{' '}\n                                Add players\n                            </button>\n                        </div>\n                    )}\n                </Index>\n                <Modal\n                    show={() => activePlayersZone()}\n                    onClose={() => setActivePlayersZone(undefined)}\n                    class=\"audio-zone-active-players-modal\"\n                >\n                    {(activePlayersZone) => (\n                        <div class=\"audio-zone-active-players-modal-container\">\n                            <div class=\"audio-zone-active-players-modal-header\">\n                                <h1>\n                                    {activePlayersZone.name} - Active Players\n                                </h1>\n                                <div\n                                    class=\"audio-zone-active-players-modal-header-close\"\n                                    onClick={(e) => {\n                                        setActivePlayersZone(undefined);\n                                        e.stopImmediatePropagation();\n                                    }}\n                                >\n                                    <img\n                                        class=\"cross-icon\"\n                                        src=\"/img/cross-white.svg\"\n                                        alt=\"Close playlist sessions modal\"\n                                    />\n                                </div>\n                            </div>\n                            <div class=\"audio-zone-active-players-modal-content\">\n                                <Index each={connections()}>\n                                    {(connection) => (\n                                        <div\n                                            class={`audio-zone-active-players-modal-connection${\n                                                connection().alive\n                                                    ? ' alive'\n                                                    : ' dead'\n                                            }`}\n                                        >\n                                            <Index each={connection().players}>\n                                                {(player) => (\n                                                    <div\n                                                        class={`audio-zone-active-players-modal-connection-player${\n                                                            activePlayersZone.players.some(\n                                                                (p) =>\n                                                                    p.playerId ===\n                                                                    player()\n                                                                        .playerId,\n                                                            )\n                                                                ? ' active'\n                                                                : ''\n                                                        }`}\n                                                    >\n                                                        {connection().name} -{' '}\n                                                        {player().name}{' '}\n                                                        {activePlayersZone.players.some(\n                                                            (p) =>\n                                                                p.playerId ===\n                                                                player()\n                                                                    .playerId,\n                                                        ) ? (\n                                                            <img\n                                                                class=\"audio-icon\"\n                                                                src=\"/img/audio-white.svg\"\n                                                                alt=\"Player enabled\"\n                                                                onClick={() =>\n                                                                    disableAudioPlayer(\n                                                                        activePlayersZone,\n                                                                        player(),\n                                                                    )\n                                                                }\n                                                            />\n                                                        ) : (\n                                                            <img\n                                                                class=\"audio-icon\"\n                                                                src=\"/img/audio-off-white.svg\"\n                                                                alt=\"Player disabled\"\n                                                                onClick={() =>\n                                                                    enableAudioPlayer(\n                                                                        activePlayersZone,\n                                                                        player(),\n                                                                    )\n                                                                }\n                                                            />\n                                                        )}\n                                                    </div>\n                                                )}\n                                            </Index>\n                                        </div>\n                                    )}\n                                </Index>\n                            </div>\n                        </div>\n                    )}\n                </Modal>\n            </div>\n        </div>\n    );\n}\n","import './audio-zones-modal.css';\nimport Modal from '../Modal';\nimport AudioZones from '../AudioZones';\nimport { showAudioZones, triggerStartup } from '~/services/app';\nimport { clientSignal } from '~/services/util';\nimport { onMount } from 'solid-js';\nimport { produce } from 'solid-js/store';\nimport { api } from '~/services/api';\nimport { setPlayerState } from '~/services/player';\n\nexport default function audioZonesModalFunc() {\n    onMount(async () => {\n        await triggerStartup();\n    });\n    const [$showAudioZones] = clientSignal(showAudioZones);\n\n    async function createNewAudioZone() {\n        const zone = await api.createAudioZone('Custom Zone');\n\n        setPlayerState(\n            produce((state) => {\n                state.audioZones.push(zone);\n            }),\n        );\n    }\n\n    return (\n        <div data-turbo-permanent id=\"audio-zones-modal\">\n            <Modal\n                show={() => $showAudioZones()}\n                onClose={() => showAudioZones.set(false)}\n            >\n                <div class=\"audio-zones-modal-container\">\n                    <div class=\"audio-zones-modal-header\">\n                        <h1>Audio Zones</h1>\n                        <button\n                            class=\"playback-sessions-modal-header-new-button\"\n                            onClick={async () => await createNewAudioZone()}\n                        >\n                            New\n                        </button>\n                        <div\n                            class=\"audio-zones-modal-close\"\n                            onClick={(e) => {\n                                showAudioZones.set(false);\n                                e.stopImmediatePropagation();\n                            }}\n                        >\n                            <img\n                                class=\"cross-icon\"\n                                src=\"/img/cross-white.svg\"\n                                alt=\"Close audio zones modal\"\n                            />\n                        </div>\n                    </div>\n                    <div class=\"audio-zones-modal-content\">\n                        <AudioZones />\n                    </div>\n                </div>\n            </Modal>\n        </div>\n    );\n}\n"],"names":["audioZonesFunc","audioZoneNameRef","connectionPlayers","setConnectionPlayers","createSignal","audioZones","setAudioZones","activeAudioZone","setActiveAudioZone","playerState","currentAudioZone","editingAudioZoneName","setEditingAudioZoneName","activePlayersZone","setActivePlayersZone","$connectionId","clientSignal","connectionId","connections","setConnections","getPlayersWithConnections","current","appState","connection","console","log","players","map","player","getAudioZonesWithConnections","zone","find","c","p","playerId","createComputed","alive","filter","dead","aliveCurrent","a","aliveOthers","activateConnectionPlayer","setPlayerState","produce","state","undefined","setCurrentPlaybackTarget","type","outputId","audioOutputId","activateAudioZone","audioZoneId","id","updateAudioZone","update","assign","z","Object","name","api","deleteAudioZone","index","newZone","findIndex","x","splice","replaceZone","existing","stateZone","disableAudioPlayer","zones","enableAudioPlayer","_el$","_$getNextElement","_tmpl$","_el$2","firstChild","_el$3","_el$4","_co$","_$getNextMarker","nextSibling","_el$5","_el$6","_co$2","_el$7","_el$8","_co$3","_$createComponent","Index","each","children","_el$9","_tmpl$2","_el$10","_el$11","_el$12","_el$13","_el$16","_el$17","_co$4","_el$14","_el$18","_el$19","_co$5","$$click","connectionPlayer","_$insert","_$effect","_$className","currentPlaybackTarget","_$runHydrationEvents","_el$20","_tmpl$3","_el$21","_el$24","_el$25","_co$6","_el$22","_el$23","_el$27","_el$28","_co$7","_el$26","audioZone","_c$","_$memo","_el$29","_tmpl$4","$$keyup","e","key","stopImmediatePropagation","value","_ref$","_$use","_$setProperty","_el$30","_tmpl$5","_el$31","_tmpl$6","_el$32","_tmpl$7","_el$33","_el$34","_el$37","_el$38","_co$8","_el$35","_el$39","_el$40","_co$9","Modal","show","onClose","_el$41","_tmpl$8","_el$42","_el$43","_el$45","_el$46","_co$10","_el$47","_el$48","_el$49","_tmpl$9","_el$50","_tmpl$10","_el$54","_el$55","_co$11","_el$51","_el$56","_el$57","_co$12","_el$53","_el$58","_el$59","_co$13","_c$2","some","_el$60","_tmpl$11","_el$61","_tmpl$12","_$delegateEvents","audioZonesModalFunc","onMount","triggerStartup","$showAudioZones","showAudioZones","createNewAudioZone","createAudioZone","push","set","AudioZones"],"mappings":"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"}