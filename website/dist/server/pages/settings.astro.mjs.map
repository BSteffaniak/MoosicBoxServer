{"version":3,"file":"settings.astro.mjs","sources":["../../../src/routes/settings.tsx","../../../src/pages/settings.astro"],"sourcesContent":["import { createSignal, For, Show } from 'solid-js';\nimport './settings.css';\nimport {\n    api,\n    connection,\n    type Connection,\n    setConnection as apiSetConnection,\n    getNewConnectionId,\n    connections,\n    setActiveConnection,\n} from '~/services/api';\nimport { clientSignal } from '~/services/util';\nimport { connectionName } from '~/services/ws';\n\nexport default function settingsPage() {\n    const [$connections, _setConnections] = clientSignal(connections);\n    const [$connection, setConnection] = clientSignal(connection);\n    const [$connectionName, setConnectionName] = clientSignal(connectionName);\n\n    const [status, setStatus] = createSignal<string>();\n    const [loading, setLoading] = createSignal(false);\n\n    let clientIdInput: HTMLInputElement;\n    let apiUrlInput: HTMLInputElement;\n    let nameInput: HTMLInputElement;\n\n    function newConnection() {\n        const id = getNewConnectionId();\n        setConnection({\n            id,\n            name: 'New connection',\n            apiUrl: '',\n            clientId: '',\n            token: '',\n            staticToken: '',\n        });\n        apiSetConnection(id, { name: 'New connection' });\n    }\n\n    function saveConnection(values: Partial<Connection>) {\n        const con = $connection();\n        const id = con?.id ?? getNewConnectionId();\n        setConnection({\n            id,\n            name: values.name ?? con?.name ?? '',\n            apiUrl: values.apiUrl ?? con?.apiUrl ?? '',\n            clientId: values.clientId ?? con?.clientId ?? '',\n            token: values.token ?? con?.token ?? '',\n            staticToken: values.staticToken ?? con?.staticToken ?? '',\n        });\n        apiSetConnection(id, values);\n    }\n\n    function saveName() {\n        saveConnection({\n            name: nameInput.value,\n        });\n    }\n\n    function saveApiUrl() {\n        const con = $connection();\n        saveConnection({\n            apiUrl: apiUrlInput.value,\n            staticToken: con?.staticToken ?? '',\n        });\n    }\n\n    let connectionNameInput: HTMLInputElement;\n\n    function saveConnectionName() {\n        setConnectionName(connectionNameInput.value);\n    }\n\n    function saveClientId() {\n        saveConnection({\n            clientId: clientIdInput.value,\n        });\n    }\n\n    let tokenInput: HTMLInputElement;\n\n    function saveToken() {\n        saveConnection({\n            token: tokenInput.value,\n        });\n    }\n\n    let staticTokenInput: HTMLInputElement;\n\n    function saveStaticToken() {\n        saveConnection({\n            staticToken: staticTokenInput.value,\n        });\n    }\n\n    let magicTokenInput: HTMLInputElement;\n\n    async function saveMagicToken() {\n        const resp = await api.magicToken(magicTokenInput.value);\n        setLoading(false);\n\n        if (resp) {\n            const con = $connection();\n            saveConnection({\n                name: con?.name ?? 'New connection',\n                apiUrl: con?.apiUrl ?? '',\n                clientId: resp.clientId,\n                token: resp.accessToken,\n            });\n            magicTokenInput.value = '';\n            setStatus('Successfully set values');\n        } else {\n            setStatus('Failed to authenticate with magic token');\n        }\n    }\n\n    return (\n        <div>\n            <section>\n                <ul>\n                    <li>\n                        Name:{' '}\n                        <input\n                            ref={connectionNameInput!}\n                            type=\"text\"\n                            value={$connectionName()}\n                            onKeyUp={(e) =>\n                                e.key === 'Enter' && saveConnectionName()\n                            }\n                        />\n                        <button onClick={saveConnectionName}>save</button>\n                    </li>\n                </ul>\n\n                <Show when={$connections()}>\n                    {(connections) => (\n                        <select\n                            name=\"connections\"\n                            id=\"connections-dropdown\"\n                            onChange={(e) => {\n                                setActiveConnection(\n                                    parseInt(e.currentTarget.value),\n                                );\n                            }}\n                        >\n                            <For each={connections()}>\n                                {(con) => (\n                                    <option\n                                        value={con.id}\n                                        selected={con.id === $connection()?.id}\n                                    >\n                                        {con.name}\n                                    </option>\n                                )}\n                            </For>\n                        </select>\n                    )}\n                </Show>\n\n                <button type=\"button\" onClick={newConnection}>\n                    New connection\n                </button>\n\n                <ul>\n                    <li>\n                        Name:{' '}\n                        <input\n                            ref={nameInput!}\n                            type=\"text\"\n                            value={$connection()?.name ?? 'New connection'}\n                            onKeyUp={(e) => e.key === 'Enter' && saveName()}\n                        />\n                        <button onClick={saveName}>save</button>\n                    </li>\n                    <li>\n                        API Url:{' '}\n                        <input\n                            ref={apiUrlInput!}\n                            type=\"text\"\n                            value={$connection()?.apiUrl ?? ''}\n                            onKeyUp={(e) => e.key === 'Enter' && saveApiUrl()}\n                        />\n                        <button onClick={saveApiUrl}>save</button>\n                    </li>\n                    <li>\n                        Client ID:{' '}\n                        <input\n                            ref={clientIdInput!}\n                            type=\"text\"\n                            value={$connection()?.clientId ?? ''}\n                            onKeyUp={(e) => e.key === 'Enter' && saveClientId()}\n                        />\n                        <button onClick={saveClientId}>save</button>\n                    </li>\n                    <li>\n                        Token:{' '}\n                        <input\n                            ref={tokenInput!}\n                            type=\"text\"\n                            value={$connection()?.token ?? ''}\n                            onKeyUp={(e) => e.key === 'Enter' && saveToken()}\n                        />\n                        <button onClick={saveToken}>save</button>\n                    </li>\n                    <li>\n                        Static Token:{' '}\n                        <input\n                            ref={staticTokenInput!}\n                            type=\"text\"\n                            value={$connection()?.staticToken ?? ''}\n                            onKeyUp={(e) =>\n                                e.key === 'Enter' && saveStaticToken()\n                            }\n                        />\n                        <button onClick={saveStaticToken}>save</button>\n                    </li>\n                    <li>\n                        Magic Token:{' '}\n                        <input\n                            ref={magicTokenInput!}\n                            type=\"text\"\n                            onKeyUp={(e) =>\n                                e.key === 'Enter' && saveMagicToken()\n                            }\n                        />\n                        <button onClick={saveMagicToken}>save</button>\n                    </li>\n                </ul>\n                {status() && status()}\n                {loading() && 'loading...'}\n            </section>\n            <hr />\n            <section>\n                <button\n                    onClick={async () => api.startScan(['LOCAL'])}\n                    type=\"button\"\n                    class=\"remove-button-styles moosicbox-button\"\n                >\n                    Scan\n                </button>\n            </section>\n        </div>\n    );\n}\n","---\nimport Layout from '~/layouts/Layout.astro';\nimport SettingsPage from '~/routes/settings.tsx';\n---\n\n<Layout title=\"MoosicBox\">\n    <SettingsPage client:load />\n</Layout>\n"],"names":["settingsPage","$connections","_setConnections","clientSignal","connections","$connection","setConnection","connection","$connectionName","setConnectionName","connectionName","status","setStatus","createSignal","loading","setLoading","_$ssr","_tmpl$","_$ssrHydrationKey","_$ssrAttribute","_$escape","_$createComponent","Show","when","children","_tmpl$2","For","each","con","_tmpl$3","id","name","apiUrl","clientId","token","staticToken","$$createComponent","$$render","$$renderComponent","Layout","$$result","SettingsPage"],"mappings":"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"}