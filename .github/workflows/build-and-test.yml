name: Build and Test

on:
    push:
        branches: ['master']
        paths:
            - packages/**
            - '*.toml'
            - Cargo.lock
            - .github/workflows/build-and-test.yml
            - free_disk_space.sh
    pull_request:
        branches: ['master']

env:
    CARGO_TERM_COLOR: always

jobs:
    build-matrix:
        name: Build matrix
        runs-on: ubuntu-latest
        outputs:
            matrix: ${{ steps.build-matrix-step.outputs.matrix }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - uses: dtolnay/rust-toolchain@stable

            - name: Build matrix JSON
              id: build-matrix-step
              run: |
                  MATRIX=$(
                      cargo run -p clippier \
                          features \
                          . \
                          --chunked 5 \
                          -o json \
                          --spread \
                          | jq -rc \
                              '[
                                  .[]
                                  | {
                                      "name": (.name | sub("^moosicbox_"; "")),
                                      "path": (.path),
                                      "features": (.features),
                                      "os": (.os + "-latest"),
                                      "dependencies": (.dependencies),
                                      "ciSteps": (.ciSteps),
                                      "env": (.env)
                                  }
                                  | del(.dependencies | nulls)
                                  | del(.ciSteps | nulls)
                                  | del(.env | nulls)
                              ]'
                  )
                  echo "Using matrix (raw):"
                  echo $MATRIX
                  echo "Using matrix:"
                  echo $MATRIX | jq
                  echo 'matrix<<EOF' >> $GITHUB_OUTPUT
                  echo $MATRIX >> $GITHUB_OUTPUT
                  echo 'EOF' >> $GITHUB_OUTPUT

    build:
        runs-on: ${{ matrix.package.os }}

        needs: build-matrix

        strategy:
            fail-fast: false

            matrix:
                package: ${{ fromJson(needs.build-matrix.outputs.matrix) }}

        steps:
            - uses: actions/checkout@v4

            - uses: dtolnay/rust-toolchain@stable

            - name: âš¡ Cache cargo
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cargo/registry
                      ~/.cargo/git
                      target
                  key: ${{ runner.os }}-${{ matrix.package.name }}-cargo-${{ hashFiles('**/Cargo.lock') }}

            - name: Install winget
              if: ${{ matrix.package.os == 'windows-latest' && contains(matrix.package.dependencies, 'winget') }}
              uses: Cyberboss/install-winget@v1

            - name: Setup CI
              if: ${{ matrix.package.ciSteps }}
              run: ${{ matrix.package.ciSteps }}

            - name: Install dependencies
              if: ${{ matrix.package.dependencies }}
              run: ${{ matrix.package.dependencies }}

            - name: Clippy ${{ matrix.package.name }}
              shell: bash
              run: |
                  (cd ${{ matrix.package.path }}; \
                      while read -r feature; do \
                          command="${{ matrix.package.env }} cargo clippy --no-default-features --features="fail-on-warnings,$feature" ${{ matrix.package.cargo }}"
                          echo "RUNNING \`$command\`"
                          if ${{ matrix.package.env }} cargo clippy \
                              --no-default-features \
                              --features="fail-on-warnings,$feature" ${{ matrix.package.cargo }}; then
                              echo "SUCCESS \`$command\`";
                          else
                              >&2 echo "FAILED \`$command\`";
                              return 1
                          fi
                      done <<<"$(echo '${{ toJson(matrix.package.features) }}' | jq -r '.[]')")

            - name: Build ${{ matrix.package.name }}
              shell: bash
              run: |
                  (cd ${{ matrix.package.path }}; \
                      while read -r feature; do \
                          command="${{ matrix.package.env }} cargo build --no-default-features --features="fail-on-warnings,$feature" ${{ matrix.package.cargo }}"
                          echo "RUNNING \`$command\`"
                          if ${{ matrix.package.env }} cargo build \
                              --no-default-features \
                              --features="fail-on-warnings,$feature" ${{ matrix.package.cargo }}; then
                              echo "SUCCESS \`$command\`";
                          else
                              >&2 echo "FAILED \`$command\`";
                              return 1
                          fi
                      done <<<"$(echo '${{ toJson(matrix.package.features) }}' | jq -r '.[]')")

            - name: Run ${{ matrix.package.name }} tests
              shell: bash
              run: |
                  (cd ${{ matrix.package.path }}; \
                      while read -r feature; do \
                          command="${{ matrix.package.env }} cargo test --no-default-features --features="fail-on-warnings,$feature" ${{ matrix.package.cargo }}"
                          echo "RUNNING \`$command\`"
                          if ${{ matrix.package.env }} cargo test \
                              --no-default-features \
                              --features="fail-on-warnings,$feature" ${{ matrix.package.cargo }}; then
                              echo "SUCCESS \`$command\`";
                          else
                              >&2 echo "FAILED \`$command\`";
                              return 1
                          fi
                      done <<<"$(echo '${{ toJson(matrix.package.features) }}' | jq -r '.[]')")

            - name: Format ${{ matrix.package.name }}
              shell: bash
              run: |
                  (cd ${{ matrix.package.path }}; ${{ matrix.package.env }} cargo fmt)

            - name: Install cargo-machete
              shell: bash
              run: |
                  cargo install cargo-machete

            - name: Validate ${{ matrix.package.name }} dependencies (machete)
              shell: bash
              run: |
                  ${{ matrix.package.env }} cargo machete --with-metadata ${{ matrix.package.path }}

    create-tauri-app-release:
        runs-on: ubuntu-latest

        needs: build

        steps:
            - uses: actions/checkout@v4
              with:
                  token: ${{ secrets.WORKFLOW_MANAGEMENT_TOKEN }}
                  path: MoosicBox

            - name: Get release hash
              id: release_hash
              run: |
                  HASH="$(git -C MoosicBox rev-parse --verify HEAD | head -c 10)"
                  echo "hash: $HASH"
                  echo "hash=$HASH" >> $GITHUB_OUTPUT

            - name: Check tag exists for SHA
              id: check_exists
              working-directory: MoosicBox
              run: |
                  git fetch --unshallow --tags
                  if [[ -n $(git show-ref --tags -d) ]]; then
                      git show-ref --tags -d

                      if [[ $(git show-ref --tags -d | grep "${{ github.sha }}") =~ "master-${{ steps.release_hash.outputs.hash }}" ]]; then
                          echo "exists=true" >> $GITHUB_OUTPUT
                          echo "exists"
                      else
                          echo "exists=false" >> $GITHUB_OUTPUT
                          echo "does not exist"
                      fi
                  fi

            - uses: BSteffaniak/delete-older-releases@master
              if: ${{ steps.check_exists.outputs.exists != 'true' }}
              with:
                  keep_latest: 2
                  delete_tag_pattern: ^master-[0-9a-f]{10,10}$
                  regex: true
              env:
                  GITHUB_TOKEN: ${{ secrets.WORKFLOW_MANAGEMENT_TOKEN }}

            - name: Create and push tag
              if: ${{ steps.check_exists.outputs.exists != 'true' }}
              working-directory: MoosicBox
              run: |
                  git tag master-${{ steps.release_hash.outputs.hash }}
                  git push origin master-${{ steps.release_hash.outputs.hash }}
