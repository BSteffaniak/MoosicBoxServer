name: Build and Test

on:
    push:
        branches: ['master', 'test-clippier']
        paths:
            - packages/**
            - '*.toml'
            - Cargo.lock
            - .github/workflows/build-and-test.yml
            - free_disk_space.sh
    pull_request:
        branches: ['master']

env:
    CARGO_TERM_COLOR: always

jobs:
    build-matrix:
        name: Build matrix
        runs-on: ubuntu-latest
        outputs:
            matrix: ${{ steps.build-matrix-step.outputs.matrix }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - uses: dtolnay/rust-toolchain@stable

            - name: Build matrix JSON
              id: build-matrix-step
              run: |
                  MATRIX=$(cargo run -p moosicbox_clippier features Cargo.toml --chunked 5 -o json --spread | jq -rc '[.[] | {"name":(.name | sub("^moosicbox_"; "")),"path":(.path),"features":(.features),"os":(.os + "-latest"),"dependencies":(.dependencies)} | del(.dependencies | nulls)]')
                  echo "Using matrix (raw):"
                  echo $MATRIX
                  echo "Using matrix:"
                  echo $MATRIX | jq
                  echo 'matrix<<EOF' >> $GITHUB_OUTPUT
                  echo $MATRIX >> $GITHUB_OUTPUT
                  echo 'EOF' >> $GITHUB_OUTPUT

    build:
        runs-on: ${{ matrix.package.os }}

        needs: build-matrix

        strategy:
            fail-fast: false

            matrix:
                package: ${{ fromJson(needs.build-matrix.outputs.matrix) }}

        steps:
            - uses: actions/checkout@v4

            - uses: dtolnay/rust-toolchain@stable

            - name: âš¡ Cache cargo
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cargo/registry
                      ~/.cargo/git
                      target
                  key: ${{ runner.os }}-${{ matrix.package.name }}-cargo-${{ hashFiles('**/Cargo.lock') }}

            - name: Install winget
              if: ${{ matrix.package.os == 'windows-latest' }}
              uses: Cyberboss/install-winget@v1

            - name: Install dependencies
              if: ${{ matrix.package.dependencies }}
              run: ${{ matrix.package.dependencies }}

            - name: Clippy ${{ matrix.package.name }}
              shell: bash
              run: |
                  (cd ${{ matrix.package.path }}; \
                      while read -r feature; do \
                          command="${{ matrix.package.env }} cargo clippy --no-default-features --features="fail-on-warnings,$feature" ${{ matrix.package.cargo }}"
                          echo "RUNNING \`$command\`"
                          if ${{ matrix.package.env }} cargo clippy \
                              --no-default-features \
                              --features="fail-on-warnings,$feature" ${{ matrix.package.cargo }}; then
                              echo "SUCCESS \`$command\`";
                          else
                              >&2 echo "FAILED \`$command\`";
                          fi
                      done <<<"$(echo '${{ toJson(matrix.package.features) }}' | jq -r '.[]')")

            - name: Build ${{ matrix.package.name }}
              shell: bash
              run: |
                  (cd ${{ matrix.package.path }}; \
                      while read -r feature; do \
                          command="${{ matrix.package.env }} cargo build --no-default-features --features="fail-on-warnings,$feature" ${{ matrix.package.cargo }}"
                          echo "RUNNING \`$command\`"
                          if ${{ matrix.package.env }} cargo build \
                              --no-default-features \
                              --features="fail-on-warnings,$feature" ${{ matrix.package.cargo }}; then
                              echo "SUCCESS \`$command\`";
                          else
                              >&2 echo "FAILED \`$command\`";
                          fi
                      done <<<"$(echo '${{ toJson(matrix.package.features) }}' | jq -r '.[]')")

            - name: Run ${{ matrix.package.name }} tests
              shell: bash
              run: |
                  (cd ${{ matrix.package.path }}; \
                      while read -r feature; do \
                          command="${{ matrix.package.env }} cargo test --no-default-features --features="fail-on-warnings,$feature" ${{ matrix.package.cargo }}"
                          echo "RUNNING \`$command\`"
                          if ${{ matrix.package.env }} cargo test \
                              --no-default-features \
                              --features="fail-on-warnings,$feature" ${{ matrix.package.cargo }}; then
                              echo "SUCCESS \`$command\`";
                          else
                              >&2 echo "FAILED \`$command\`";
                          fi
                      done <<<"$(echo '${{ toJson(matrix.package.features) }}' | jq -r '.[]')")

            - name: Format ${{ matrix.package.name }}
              shell: bash
              run: |
                  (cd ${{ matrix.package.path }}; ${{ matrix.package.env }} cargo fmt)

            - name: Install cargo-machete
              shell: bash
              run: |
                  cargo install cargo-machete

            - name: Validate ${{ matrix.package.name }} dependencies (machete)
              shell: bash
              run: |
                  ${{ matrix.package.env }} cargo machete --with-metadata ${{ matrix.package.path }}
